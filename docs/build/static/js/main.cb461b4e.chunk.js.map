{"version":3,"sources":["reducers/todo.ts","context/todo.tsx","components/InputForm.tsx","components/TodoCard.tsx","components/TodoTable.tsx","components/ViewButton.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","reducer","state","action","type","ADD_TODO","content","payload","note","isDone","REMOVE_TODO","tmp","splice","removeIndex","REMOVE_ALL","SET_DONE","tmp1","doneIndex","initialState","TodoContext","createContext","TodoProvider","props","useReducer","todos","dispatch","Provider","value","useTodo","useContext","removeTodo","idx","doneTodo","e","target","checked","InputForm","useState","setContent","setNote","canRegister","useMemo","registerButtonClass","className","htmlFor","id","onChange","inputContent","inputNote","onClick","disabled","TodoCard","map","todo","handlerDelete","TodoTable","ViewButton","isListView","setIsListView","xmlns","fill","viewBox","stroke","stroke-linecap","stroke-linejoin","stroke-width","d","strokeLinecap","strokeLinejoin","strokeWidth","App","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb461b4e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport type Todo = {\n  content: string;\n  note?: string;\n  isDone: boolean;\n};\n\nexport type Todos = Array<Todo>;\n\nexport type TodoState = Todos;\nexport enum ActionType {\n  ADD_TODO,\n  REMOVE_TODO,\n  REMOVE_ALL,\n  SET_DONE,\n}\nexport type TodoAction =\n  | {\n      type: ActionType.ADD_TODO;\n      payload: {\n        content: string;\n        note: string;\n      };\n    }\n  | {\n      type: ActionType.REMOVE_TODO;\n      removeIndex: number;\n    }\n  | {\n      type: ActionType.REMOVE_ALL;\n    }\n  | {\n      type: ActionType.SET_DONE;\n      payload: {\n        doneIndex: number;\n        isDone: boolean;\n      };\n    };\n\nexport const reducer: React.Reducer<TodoState, TodoAction> = (\n  state: TodoState,\n  action: TodoAction\n) => {\n  switch (action.type) {\n    case ActionType.ADD_TODO:\n      return [\n        ...state,\n        {\n          content: action.payload.content,\n          note: action.payload.note,\n          isDone: false,\n        },\n      ];\n    case ActionType.REMOVE_TODO:\n      const tmp = [...state];\n      tmp.splice(action.removeIndex, 1);\n      return tmp;\n    case ActionType.REMOVE_ALL:\n      return [];\n    case ActionType.SET_DONE:\n      let tmp1 = [...state];\n      tmp1[action.payload.doneIndex].isDone = action.payload.isDone;\n      return tmp1;\n  }\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { ActionType, reducer, TodoAction, TodoState } from \"../reducers/todo\";\n\nexport type TodoContextType = {\n  todos: TodoState;\n  dispatch: React.Dispatch<TodoAction>;\n};\nconst initialState: TodoState = [];\n\nexport const TodoContext = createContext({} as TodoContextType);\n\nexport const TodoProvider = (props: React.PropsWithChildren<{}>) => {\n  const [todos, dispatch] = useReducer(reducer, initialState);\n\n  return <TodoContext.Provider value={{ todos, dispatch }} {...props} />;\n};\n\nexport const useTodo = () => {\n  const { todos, dispatch } = useContext(TodoContext);\n\n  const removeTodo = (idx: number) => {\n    dispatch({\n      type: ActionType.REMOVE_TODO,\n      removeIndex: idx,\n    });\n  };\n\n  const doneTodo = (e: React.ChangeEvent<HTMLInputElement>, idx: number) => {\n    dispatch({\n      type: ActionType.SET_DONE,\n      payload: {\n        doneIndex: idx,\n        isDone: e.target.checked,\n      },\n    });\n  };\n  return { todos, dispatch, removeTodo, doneTodo };\n};\n","import React, { useMemo, useState } from \"react\";\nimport { useTodo } from \"../context/todo\";\nimport { ActionType } from \"../reducers/todo\";\n\nconst InputForm: React.FC = () => {\n  const { dispatch } = useTodo();\n\n  const [content, setContent] = useState<string>(\"\");\n  const [note, setNote] = useState<string>(\"\");\n\n  const canRegister = useMemo(() => content !== \"\", [content]);\n  const registerButtonClass = useMemo(\n    () => (canRegister ? \"btn-blue\" : \"btn-gray\"),\n    [canRegister]\n  );\n\n  const inputContent = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setContent(e.target.value);\n  };\n\n  const inputNote = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNote(e.target.value);\n  };\n\n  const addTodo = () => {\n    dispatch({\n      type: ActionType.ADD_TODO,\n      payload: {\n        content: content,\n        note: note,\n      },\n    });\n    setContent(\"\");\n    setNote(\"\");\n  };\n\n  const removeAll = () => {\n    dispatch({\n      type: ActionType.REMOVE_ALL,\n    });\n  };\n\n  return (\n    <div>\n      <span className=\"px-3\">\n        <label htmlFor=\"todo\" className=\"mr-2\">\n          ToDo\n        </label>\n        <input\n          id=\"todo\"\n          className=\"text-input\"\n          value={content}\n          onChange={(e) => inputContent(e)}\n        />\n      </span>\n\n      <span className=\"px-3\">\n        <label htmlFor=\"note\" className=\"mr-2\">\n          備考\n        </label>\n        <input\n          id=\"note\"\n          className=\"text-input\"\n          value={note}\n          onChange={(e) => inputNote(e)}\n        />\n      </span>\n\n      {canRegister}\n      <button\n        className={registerButtonClass}\n        onClick={addTodo}\n        disabled={!canRegister}\n      >\n        タスク追加\n      </button>\n      <button className=\"btn-red\" onClick={removeAll}>\n        全削除\n      </button>\n    </div>\n  );\n};\n\nexport default InputForm;\n","import React, { useEffect, useState } from \"react\";\nimport { setTimeout } from \"timers\";\nimport { useTodo } from \"../context/todo\";\n\nconst TodoCard: React.FC = () => {\n  const { todos, doneTodo, removeTodo } = useTodo();\n\n  // useEffect(() => {\n  //   setAppendClass(Array(todos.length).fill(\"\"));\n  // }, [todos]);\n\n  // const [appendClass, setAppendClass] = useState<Array<string>>([]);\n\n  const handlerDelete = (idx: number) => {\n    removeTodo(idx);\n    // const tmp = [...appendClass];\n    // tmp[idx] = \"disappear\";\n    // setAppendClass(tmp);\n\n    // setTimeout(() => {\n    //   removeTodo(idx);\n    // }, 1000);\n  };\n\n  return (\n    <div className=\"grid grid-cols-4 gap-4\">\n      {todos.map((todo, idx) => (\n        <div\n          key={idx}\n          // className={`border rounded p-3 bg-gradient-to-br from-gray-100 to-blue-200 appear ${appendClass[idx]}`}\n          className={`border rounded p-3 bg-gradient-to-br from-gray-100 to-blue-200 appear`}\n        >\n          <div>\n            <input\n              type=\"checkbox\"\n              checked={todo.isDone}\n              onChange={(e) => doneTodo(e, idx)}\n            />\n            <span className=\"pl-2\">完了</span>\n          </div>\n          <div className={`${todo.isDone && \"line-through\"}`}>\n            <div>{todo.content}</div>\n            <div>{todo.note}</div>\n          </div>\n\n          <div className=\"flex justify-end \">\n            <button className=\"btn-red\" onClick={() => handlerDelete(idx)}>\n              削除\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default TodoCard;\n","import React from \"react\";\nimport { useTodo } from \"../context/todo\";\n\nconst TodoTable: React.FC = () => {\n  const { todos, doneTodo, removeTodo } = useTodo();\n\n  return (\n    <table className=\"table-fixed\">\n      <thead>\n        <tr>\n          <th className=\"w-1/6\"></th>\n          <th className=\"w-2/6\">ToDo</th>\n          <th className=\"w-2/6\">備考</th>\n          <th className=\"w-1/6\"></th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map((todo, idx) => (\n          <tr\n            key={idx}\n            className={todo.isDone ? \"line-through appear\" : \"appear\"}\n          >\n            <td>\n              <input\n                type=\"checkbox\"\n                checked={todo.isDone}\n                onChange={(e) => doneTodo(e, idx)}\n              />\n            </td>\n            <td>{todo.content}</td>\n            <td>{todo.note}</td>\n            <td>\n              <button className=\"btn-red\" onClick={() => removeTodo(idx)}>\n                削除\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default TodoTable;\n","import React from \"react\";\n\ntype Props = {\n  isListView: boolean;\n  setIsListView: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst ViewButton: React.FC<Props> = ({ isListView, setIsListView }) => {\n  return (\n    <>\n      <button\n        className={`border rounded rounded-r-none ${\n          isListView && \"bg-gray-300\"\n        }`}\n        onClick={() => setIsListView(true)}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-6 w-6\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            stroke-width=\"2\"\n            d=\"M4 6h16M4 10h16M4 14h16M4 18h16\"\n          />\n        </svg>\n      </button>\n      <button\n        className={`border rounded rounded-l-none ${\n          !isListView && \"bg-gray-300\"\n        }`}\n        onClick={() => setIsListView(false)}\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"h-6 w-6\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke=\"currentColor\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"\n          />\n        </svg>\n      </button>\n    </>\n  );\n};\n\nexport default ViewButton;\n","import React, { useState } from \"react\";\nimport InputForm from \"./components/InputForm\";\nimport TodoCard from \"./components/TodoCard\";\nimport TodoTable from \"./components/TodoTable\";\nimport ViewButton from \"./components/ViewButton\";\nimport { useTodo } from \"./context/todo\";\n\nconst App: React.FC = () => {\n  const { todos } = useTodo();\n  const [isListView, setIsListView] = useState(true);\n\n  const isEmpty = (): boolean => todos.length === 0;\n\n  return (\n    <div className=\"m-6 mx-12\">\n      <p className=\"text-7xl text-center\">ToDo List</p>\n      <div className=\"my-3 text-3xl\">タスク件数：{todos.length}件</div>\n\n      <InputForm />\n\n      <div className=\"flex justify-end mb-3\">\n        <ViewButton isListView={isListView} setIsListView={setIsListView} />\n      </div>\n\n      {isEmpty() ? (\n        <div className=\"pt-3 text-xl text-center\">\n          タスクが登録されていません。\n        </div>\n      ) : isListView ? (\n        <TodoTable />\n      ) : (\n        <TodoCard />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { TodoProvider } from \"./context/todo\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoProvider>\n      <App />\n    </TodoProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}